// kvm-gen-magic generates Go source code for some useful KVM constants. We do this to
// avoid requiring cgo. It also generates a String method for the Cap enum which returns
// the name of the capability (like "KVM_CAP_NOP"). This helper is run by `go generate
// ./kvm` to generate kvm/magic.go.
package main

// #include <linux/kvm.h>
// #include <asm/kvm.h>
import "C"

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"slices"
)

func main() {
	out := flag.String("out", "/dev/stdout", "Output location")
	pkg := flag.String("pkg", "kvm", "Package name")

	flag.Parse()

	b := &bytes.Buffer{}
	fmt.Fprint(b, "// DO NOT EDIT! Generated by cmd/kvm-gen-magic.\n")
	fmt.Fprint(b, "//go:build linux\n\n")
	fmt.Fprintf(b, "package %s\n\n", *pkg)
	fmt.Fprint(b, "import \"fmt\"\n\n")

	caps := map[int]struct {
		C  string
		Go string
	}{
		C.KVM_CAP_IRQCHIP:                     {"KVM_CAP_IRQCHIP", "CapIRQChip"},
		C.KVM_CAP_HLT:                         {"KVM_CAP_HLT", "CapHLT"},
		C.KVM_CAP_MMU_SHADOW_CACHE_CONTROL:    {"KVM_CAP_MMU_SHADOW_CACHE_CONTROL", "CapMMUShadowCacheControl"},
		C.KVM_CAP_USER_MEMORY:                 {"KVM_CAP_USER_MEMORY", "CapUserMemory"},
		C.KVM_CAP_SET_TSS_ADDR:                {"KVM_CAP_SET_TSS_ADDR", "CapSetTSSAddr"},
		C.KVM_CAP_VAPIC:                       {"KVM_CAP_VAPIC", "CapVAPIC"},
		C.KVM_CAP_EXT_CPUID:                   {"KVM_CAP_EXT_CPUID", "CapExtCPUID"},
		C.KVM_CAP_CLOCKSOURCE:                 {"KVM_CAP_CLOCKSOURCE", "CapClockSource"},
		C.KVM_CAP_NR_VCPUS:                    {"KVM_CAP_NR_VCPUS", "CapNrVCPUs"},
		C.KVM_CAP_NR_MEMSLOTS:                 {"KVM_CAP_NR_MEMSLOTS", "CapNrMemslots"},
		C.KVM_CAP_PIT:                         {"KVM_CAP_PIT", "CapPIT"},
		C.KVM_CAP_NOP_IO_DELAY:                {"KVM_CAP_NOP_IO_DELAY", "CapNopIODelay"},
		C.KVM_CAP_PV_MMU:                      {"KVM_CAP_PV_MMU", "CapPVMMU"},
		C.KVM_CAP_MP_STATE:                    {"KVM_CAP_MP_STATE", "CapMPState"},
		C.KVM_CAP_COALESCED_MMIO:              {"KVM_CAP_COALESCED_MMIO", "CapCoalescedMMIO"},
		C.KVM_CAP_SYNC_MMU:                    {"KVM_CAP_SYNC_MMU", "CapSyncMMU"},
		C.KVM_CAP_IOMMU:                       {"KVM_CAP_IOMMU", "CapIOMMU"},
		C.KVM_CAP_DESTROY_MEMORY_REGION_WORKS: {"KVM_CAP_DESTROY_MEMORY_REGION_WORKS", "CapDestroyMemoryRegionWorks"}, // /* Bug in KVM_SET_USER_MEMORY_REGION fixed: */
		C.KVM_CAP_USER_NMI:                    {"KVM_CAP_USER_NMI", "CapUserNMI"},
		C.KVM_CAP_SET_GUEST_DEBUG:             {"KVM_CAP_SET_GUEST_DEBUG", "CapSetGuestDebug"},    // #ifdef __KVM_HAVE_GUEST_DEBUG
		C.KVM_CAP_REINJECT_CONTROL:            {"KVM_CAP_REINJECT_CONTROL", "CapReinjectControl"}, // #ifdef __KVM_HAVE_PIT
		C.KVM_CAP_IRQ_ROUTING:                 {"KVM_CAP_IRQ_ROUTING", "CapIRQRouting"},
		C.KVM_CAP_IRQ_INJECT_STATUS:           {"KVM_CAP_IRQ_INJECT_STATUS", "CapIRQInjectStatus"},
		C.KVM_CAP_ASSIGN_DEV_IRQ:              {"KVM_CAP_ASSIGN_DEV_IRQ", "CapAssignDevIRQ"},
		C.KVM_CAP_JOIN_MEMORY_REGIONS_WORKS:   {"KVM_CAP_JOIN_MEMORY_REGIONS_WORKS", "CapJoinMemoryRegionsWorks"}, // /* Another bug in KVM_SET_USER_MEMORY_REGION fixed: */
		C.KVM_CAP_MCE:                         {"KVM_CAP_MCE", "CapMCE"},                                          // #ifdef __KVM_HAVE_MCE
		C.KVM_CAP_IRQFD:                       {"KVM_CAP_IRQFD", "CapIRQFD"},
		C.KVM_CAP_PIT2:                        {"KVM_CAP_PIT2", "CapPIT2"}, // #ifdef __KVM_HAVE_PIT
		C.KVM_CAP_SET_BOOT_CPU_ID:             {"KVM_CAP_SET_BOOT_CPU_ID", "CapSetBootCPUID"},
		C.KVM_CAP_PIT_STATE2:                  {"KVM_CAP_PIT_STATE2", "CapPITState2"}, // #ifdef __KVM_HAVE_PIT_STATE2
		C.KVM_CAP_IOEVENTFD:                   {"KVM_CAP_IOEVENTFD", "CapIOEventFD"},
		C.KVM_CAP_SET_IDENTITY_MAP_ADDR:       {"KVM_CAP_SET_IDENTITY_MAP_ADDR", "CapSetIdentityMapAddr"},
		C.KVM_CAP_XEN_HVM:                     {"KVM_CAP_XEN_HVM", "CapXenHVM"}, // #ifdef __KVM_HAVE_XEN_HVM
		C.KVM_CAP_ADJUST_CLOCK:                {"KVM_CAP_ADJUST_CLOCK", "CapAdjustClock"},
		C.KVM_CAP_INTERNAL_ERROR_DATA:         {"KVM_CAP_INTERNAL_ERROR_DATA", "CapInternalErrorData"},
		C.KVM_CAP_VCPU_EVENTS:                 {"KVM_CAP_VCPU_EVENTS", "CapVCPUEvents"}, // #ifdef __KVM_HAVE_VCPU_EVENTS
		C.KVM_CAP_S390_PSW:                    {"KVM_CAP_S390_PSW", "CapS390PSW"},
		C.KVM_CAP_PPC_SEGSTATE:                {"KVM_CAP_PPC_SEGSTATE", "CapPPCSegState"},
		C.KVM_CAP_HYPERV:                      {"KVM_CAP_HYPERV", "CapHyperV"},
		C.KVM_CAP_HYPERV_VAPIC:                {"KVM_CAP_HYPERV_VAPIC", "CapHyperVVAPIC"},
		C.KVM_CAP_HYPERV_SPIN:                 {"KVM_CAP_HYPERV_SPIN", "CapHyperVSpin"},
		C.KVM_CAP_PCI_SEGMENT:                 {"KVM_CAP_PCI_SEGMENT", "CapPCISegment"},
		C.KVM_CAP_PPC_PAIRED_SINGLES:          {"KVM_CAP_PPC_PAIRED_SINGLES", "CapPPCPairedSingles"},
		C.KVM_CAP_INTR_SHADOW:                 {"KVM_CAP_INTR_SHADOW", "CapIntrShadow"},
		C.KVM_CAP_DEBUGREGS:                   {"KVM_CAP_DEBUGREGS", "CapDebugRegs"}, // #ifdef __KVM_HAVE_DEBUGREGS
		C.KVM_CAP_X86_ROBUST_SINGLESTEP:       {"KVM_CAP_X86_ROBUST_SINGLESTEP", "CapX86RobustSingleStep"},
		C.KVM_CAP_PPC_OSI:                     {"KVM_CAP_PPC_OSI", "CapPPCOSI"},
		C.KVM_CAP_PPC_UNSET_IRQ:               {"KVM_CAP_PPC_UNSET_IRQ", "CapPPCUnsetIRQ"},
		C.KVM_CAP_ENABLE_CAP:                  {"KVM_CAP_ENABLE_CAP", "CapEnableCap"},
		C.KVM_CAP_XSAVE:                       {"KVM_CAP_XSAVE", "CapXSave"}, // #ifdef __KVM_HAVE_XSAVE
		C.KVM_CAP_XCRS:                        {"KVM_CAP_XCRS", "CapXCRS"},   // #ifdef __KVM_HAVE_XCRS
		C.KVM_CAP_PPC_GET_PVINFO:              {"KVM_CAP_PPC_GET_PVINFO", "CapPPCGetPVInfo"},
		C.KVM_CAP_PPC_IRQ_LEVEL:               {"KVM_CAP_PPC_IRQ_LEVEL", "CapPPCIRQLevel"},
		C.KVM_CAP_ASYNC_PF:                    {"KVM_CAP_ASYNC_PF", "CapAsyncPF"},
		C.KVM_CAP_TSC_CONTROL:                 {"KVM_CAP_TSC_CONTROL", "CapTSCControl"},
		C.KVM_CAP_GET_TSC_KHZ:                 {"KVM_CAP_GET_TSC_KHZ", "CapGetTSCKHz"},
		C.KVM_CAP_PPC_BOOKE_SREGS:             {"KVM_CAP_PPC_BOOKE_SREGS", "CapPPCBookeSRegs"},
		C.KVM_CAP_SPAPR_TCE:                   {"KVM_CAP_SPAPR_TCE", "CapSPAPRTCE"},
		C.KVM_CAP_PPC_SMT:                     {"KVM_CAP_PPC_SMT", "CapPPCSMT"},
		C.KVM_CAP_PPC_RMA:                     {"KVM_CAP_PPC_RMA", "CapPPCRMA"},
		C.KVM_CAP_MAX_VCPUS:                   {"KVM_CAP_MAX_VCPUS", "CapMaxVCPUs"},
		C.KVM_CAP_PPC_HIOR:                    {"KVM_CAP_PPC_HIOR", "CapPPCHIOR"},
		C.KVM_CAP_PPC_PAPR:                    {"KVM_CAP_PPC_PAPR", "CapPPCPAPR"},
		C.KVM_CAP_SW_TLB:                      {"KVM_CAP_SW_TLB", "CapSWTLB"},
		C.KVM_CAP_ONE_REG:                     {"KVM_CAP_ONE_REG", "CapOneReg"},
		C.KVM_CAP_S390_GMAP:                   {"KVM_CAP_S390_GMAP", "CapS390GMap"},
		C.KVM_CAP_TSC_DEADLINE_TIMER:          {"KVM_CAP_TSC_DEADLINE_TIMER", "CapTSCDeadlineTimer"},
		C.KVM_CAP_S390_UCONTROL:               {"KVM_CAP_S390_UCONTROL", "CapS390UControl"},
		C.KVM_CAP_SYNC_REGS:                   {"KVM_CAP_SYNC_REGS", "CapSyncRegs"},
		C.KVM_CAP_PCI_2_3:                     {"KVM_CAP_PCI_2_3", "CapPCI23"},
		C.KVM_CAP_KVMCLOCK_CTRL:               {"KVM_CAP_KVMCLOCK_CTRL", "CapKVMClockCtrl"},
		C.KVM_CAP_SIGNAL_MSI:                  {"KVM_CAP_SIGNAL_MSI", "CapSignalMSI"},
		C.KVM_CAP_PPC_GET_SMMU_INFO:           {"KVM_CAP_PPC_GET_SMMU_INFO", "CapPPCGetSMMUInfo"},
		C.KVM_CAP_S390_COW:                    {"KVM_CAP_S390_COW", "CapS390COW"},
		C.KVM_CAP_PPC_ALLOC_HTAB:              {"KVM_CAP_PPC_ALLOC_HTAB", "CapPPCAllocHTAB"},
		C.KVM_CAP_READONLY_MEM:                {"KVM_CAP_READONLY_MEM", "CapReadonlyMem"},
		C.KVM_CAP_IRQFD_RESAMPLE:              {"KVM_CAP_IRQFD_RESAMPLE", "CapIRQFDResample"},
		C.KVM_CAP_PPC_BOOKE_WATCHDOG:          {"KVM_CAP_PPC_BOOKE_WATCHDOG", "CapPPCBookeWatchdog"},
		C.KVM_CAP_PPC_HTAB_FD:                 {"KVM_CAP_PPC_HTAB_FD", "CapPPCHTABFD"},
		C.KVM_CAP_S390_CSS_SUPPORT:            {"KVM_CAP_S390_CSS_SUPPORT", "CapS390CSSSupport"},
		C.KVM_CAP_PPC_EPR:                     {"KVM_CAP_PPC_EPR", "CapPPCEPR"},
		C.KVM_CAP_ARM_PSCI:                    {"KVM_CAP_ARM_PSCI", "CapARMPSCI"},
		C.KVM_CAP_ARM_SET_DEVICE_ADDR:         {"KVM_CAP_ARM_SET_DEVICE_ADDR", "CapARMSetDeviceAddr"},
		C.KVM_CAP_DEVICE_CTRL:                 {"KVM_CAP_DEVICE_CTRL", "CapDeviceCtrl"},
		C.KVM_CAP_IRQ_MPIC:                    {"KVM_CAP_IRQ_MPIC", "CapIRQMPIC"},
		C.KVM_CAP_PPC_RTAS:                    {"KVM_CAP_PPC_RTAS", "CapPPCRTAS"},
		C.KVM_CAP_IRQ_XICS:                    {"KVM_CAP_IRQ_XICS", "CapIRQXICS"},
		C.KVM_CAP_ARM_EL1_32BIT:               {"KVM_CAP_ARM_EL1_32BIT", "CapARMEL132Bit"},
		C.KVM_CAP_SPAPR_MULTITCE:              {"KVM_CAP_SPAPR_MULTITCE", "CapSPAPRMultitce"},
		C.KVM_CAP_EXT_EMUL_CPUID:              {"KVM_CAP_EXT_EMUL_CPUID", "CapExtEmulCPUID"},
		C.KVM_CAP_HYPERV_TIME:                 {"KVM_CAP_HYPERV_TIME", "CapHyperVTime"},
		C.KVM_CAP_IOAPIC_POLARITY_IGNORED:     {"KVM_CAP_IOAPIC_POLARITY_IGNORED", "CapIOAPICPolarityIgnored"},
		C.KVM_CAP_ENABLE_CAP_VM:               {"KVM_CAP_ENABLE_CAP_VM", "CapEnableCapVM"},
		C.KVM_CAP_S390_IRQCHIP:                {"KVM_CAP_S390_IRQCHIP", "CapS390IRQChip"},
		C.KVM_CAP_IOEVENTFD_NO_LENGTH:         {"KVM_CAP_IOEVENTFD_NO_LENGTH", "CapIOEventFDNoLength"},
		C.KVM_CAP_VM_ATTRIBUTES:               {"KVM_CAP_VM_ATTRIBUTES", "CapVMAttributes"},
		C.KVM_CAP_ARM_PSCI_0_2:                {"KVM_CAP_ARM_PSCI_0_2", "CapARMPSCI02"},
		C.KVM_CAP_PPC_FIXUP_HCALL:             {"KVM_CAP_PPC_FIXUP_HCALL", "CapPPCFixupHCall"},
		C.KVM_CAP_PPC_ENABLE_HCALL:            {"KVM_CAP_PPC_ENABLE_HCALL", "CapPPCEnableHCall"},
		C.KVM_CAP_CHECK_EXTENSION_VM:          {"KVM_CAP_CHECK_EXTENSION_VM", "CapCheckExtensionVM"},
		C.KVM_CAP_S390_USER_SIGP:              {"KVM_CAP_S390_USER_SIGP", "CapS390UserSIGP"},
		C.KVM_CAP_S390_VECTOR_REGISTERS:       {"KVM_CAP_S390_VECTOR_REGISTERS", "CapS390VectorRegisters"},
		C.KVM_CAP_S390_MEM_OP:                 {"KVM_CAP_S390_MEM_OP", "CapS390MemOp"},
		C.KVM_CAP_S390_USER_STSI:              {"KVM_CAP_S390_USER_STSI", "CapS390UserSTSI"},
		C.KVM_CAP_S390_SKEYS:                  {"KVM_CAP_S390_SKEYS", "CapS390SKeys"},
		C.KVM_CAP_MIPS_FPU:                    {"KVM_CAP_MIPS_FPU", "CapMIPSFPU"},
		C.KVM_CAP_MIPS_MSA:                    {"KVM_CAP_MIPS_MSA", "CapMIPSMSA"},
		C.KVM_CAP_S390_INJECT_IRQ:             {"KVM_CAP_S390_INJECT_IRQ", "CapS390InjectIRQ"},
		C.KVM_CAP_S390_IRQ_STATE:              {"KVM_CAP_S390_IRQ_STATE", "CapS390IRQState"},
		C.KVM_CAP_PPC_HWRNG:                   {"KVM_CAP_PPC_HWRNG", "CapPPCHWRNG"},
		C.KVM_CAP_DISABLE_QUIRKS:              {"KVM_CAP_DISABLE_QUIRKS", "CapDisableQuirks"},
		C.KVM_CAP_X86_SMM:                     {"KVM_CAP_X86_SMM", "CapX86SMM"},
		C.KVM_CAP_MULTI_ADDRESS_SPACE:         {"KVM_CAP_MULTI_ADDRESS_SPACE", "CapMultiAddressSpace"},
		C.KVM_CAP_GUEST_DEBUG_HW_BPS:          {"KVM_CAP_GUEST_DEBUG_HW_BPS", "CapGuestDebugHWBPS"},
		C.KVM_CAP_GUEST_DEBUG_HW_WPS:          {"KVM_CAP_GUEST_DEBUG_HW_WPS", "CapGuestDebugHWWPS"},
		C.KVM_CAP_SPLIT_IRQCHIP:               {"KVM_CAP_SPLIT_IRQCHIP", "CapSplitIRQChip"},
		C.KVM_CAP_IOEVENTFD_ANY_LENGTH:        {"KVM_CAP_IOEVENTFD_ANY_LENGTH", "CapIOEventFDAnyLength"},
		C.KVM_CAP_HYPERV_SYNIC:                {"KVM_CAP_HYPERV_SYNIC", "CapHyperVSYNIC"},
		C.KVM_CAP_S390_RI:                     {"KVM_CAP_S390_RI", "CapS390RI"},
		C.KVM_CAP_SPAPR_TCE_64:                {"KVM_CAP_SPAPR_TCE_64", "CapSPAPRTCE64"},
		C.KVM_CAP_ARM_PMU_V3:                  {"KVM_CAP_ARM_PMU_V3", "CapARMPMUv3"},
		C.KVM_CAP_VCPU_ATTRIBUTES:             {"KVM_CAP_VCPU_ATTRIBUTES", "CapVCPUAttributes"},
		C.KVM_CAP_MAX_VCPU_ID:                 {"KVM_CAP_MAX_VCPU_ID", "CapMaxVCPUID"},
		C.KVM_CAP_X2APIC_API:                  {"KVM_CAP_X2APIC_API", "CapX2APICAPI"},
		C.KVM_CAP_S390_USER_INSTR0:            {"KVM_CAP_S390_USER_INSTR0", "CapS390UserInstr0"},
		C.KVM_CAP_MSI_DEVID:                   {"KVM_CAP_MSI_DEVID", "CapMSIDevid"},
		C.KVM_CAP_PPC_HTM:                     {"KVM_CAP_PPC_HTM", "CapPPCHTM"},
		C.KVM_CAP_SPAPR_RESIZE_HPT:            {"KVM_CAP_SPAPR_RESIZE_HPT", "CapSPAPRResizeHPT"},
		C.KVM_CAP_PPC_MMU_RADIX:               {"KVM_CAP_PPC_MMU_RADIX", "CapPPCMMURadix"},
		C.KVM_CAP_PPC_MMU_HASH_V3:             {"KVM_CAP_PPC_MMU_HASH_V3", "CapPPCMMUHashV3"},
		C.KVM_CAP_IMMEDIATE_EXIT:              {"KVM_CAP_IMMEDIATE_EXIT", "CapImmediateExit"},
		C.KVM_CAP_MIPS_VZ:                     {"KVM_CAP_MIPS_VZ", "CapMIPSVZ"},
		C.KVM_CAP_MIPS_TE:                     {"KVM_CAP_MIPS_TE", "CapMIPSTE"},
		C.KVM_CAP_MIPS_64BIT:                  {"KVM_CAP_MIPS_64BIT", "CapMIPS64Bit"},
		C.KVM_CAP_S390_GS:                     {"KVM_CAP_S390_GS", "CapS390GS"},
		C.KVM_CAP_S390_AIS:                    {"KVM_CAP_S390_AIS", "CapS390AIS"},
		C.KVM_CAP_SPAPR_TCE_VFIO:              {"KVM_CAP_SPAPR_TCE_VFIO", "CapSPAPRTCEVFIO"},
		C.KVM_CAP_X86_DISABLE_EXITS:           {"KVM_CAP_X86_DISABLE_EXITS", "CapX86DisableExits"},
		C.KVM_CAP_ARM_USER_IRQ:                {"KVM_CAP_ARM_USER_IRQ", "CapARMUserIRQ"},
		C.KVM_CAP_S390_CMMA_MIGRATION:         {"KVM_CAP_S390_CMMA_MIGRATION", "CapS390CMMAMigration"},
		C.KVM_CAP_PPC_FWNMI:                   {"KVM_CAP_PPC_FWNMI", "CapPPCFWNMI"},
		C.KVM_CAP_PPC_SMT_POSSIBLE:            {"KVM_CAP_PPC_SMT_POSSIBLE", "CapPPCSMTPossible"},
		C.KVM_CAP_HYPERV_SYNIC2:               {"KVM_CAP_HYPERV_SYNIC2", "CapHyperVSYNIC2"},
		C.KVM_CAP_HYPERV_VP_INDEX:             {"KVM_CAP_HYPERV_VP_INDEX", "CapHyperVVPIndex"},
		C.KVM_CAP_S390_AIS_MIGRATION:          {"KVM_CAP_S390_AIS_MIGRATION", "CapS390AISMigration"},
		C.KVM_CAP_PPC_GET_CPU_CHAR:            {"KVM_CAP_PPC_GET_CPU_CHAR", "CapPPCGetCPUChar"},
		C.KVM_CAP_S390_BPB:                    {"KVM_CAP_S390_BPB", "CapS390BPB"},
		C.KVM_CAP_GET_MSR_FEATURES:            {"KVM_CAP_GET_MSR_FEATURES", "CapGetMSRFeatures"},
		C.KVM_CAP_HYPERV_EVENTFD:              {"KVM_CAP_HYPERV_EVENTFD", "CapHyperVEventFD"},
		C.KVM_CAP_HYPERV_TLBFLUSH:             {"KVM_CAP_HYPERV_TLBFLUSH", "CapHyperVTLBFlush"},
		C.KVM_CAP_S390_HPAGE_1M:               {"KVM_CAP_S390_HPAGE_1M", "CapS390HPage1M"},
		C.KVM_CAP_NESTED_STATE:                {"KVM_CAP_NESTED_STATE", "CapNestedState"},
		C.KVM_CAP_ARM_INJECT_SERROR_ESR:       {"KVM_CAP_ARM_INJECT_SERROR_ESR", "CapARMINJECTSERRORESR"},
		C.KVM_CAP_MSR_PLATFORM_INFO:           {"KVM_CAP_MSR_PLATFORM_INFO", "CapMSRPlatformInfo"},
		C.KVM_CAP_PPC_NESTED_HV:               {"KVM_CAP_PPC_NESTED_HV", "CapPPCNestedHV"},
		C.KVM_CAP_HYPERV_SEND_IPI:             {"KVM_CAP_HYPERV_SEND_IPI", "CapHyperVSendIPI"},
		C.KVM_CAP_COALESCED_PIO:               {"KVM_CAP_COALESCED_PIO", "CapCoalescedPIO"},
		C.KVM_CAP_HYPERV_ENLIGHTENED_VMCS:     {"KVM_CAP_HYPERV_ENLIGHTENED_VMCS", "CapHyperVEnlightenedVMCS"},
		C.KVM_CAP_EXCEPTION_PAYLOAD:           {"KVM_CAP_EXCEPTION_PAYLOAD", "CapExceptionPayload"},
		C.KVM_CAP_ARM_VM_IPA_SIZE:             {"KVM_CAP_ARM_VM_IPA_SIZE", "CapARMVMIPASize"},
		C.KVM_CAP_MANUAL_DIRTY_LOG_PROTECT:    {"KVM_CAP_MANUAL_DIRTY_LOG_PROTECT", "CapManualDirtyLogProtect"},
		C.KVM_CAP_HYPERV_CPUID:                {"KVM_CAP_HYPERV_CPUID", "CapHyperVCPUID"},
		C.KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2:   {"KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2", "CapManualDirtyLogProtect2"},
		C.KVM_CAP_PPC_IRQ_XIVE:                {"KVM_CAP_PPC_IRQ_XIVE", "CapPPCIRQXIVE"},
		C.KVM_CAP_ARM_SVE:                     {"KVM_CAP_ARM_SVE", "CapARMSVE"},
		C.KVM_CAP_ARM_PTRAUTH_ADDRESS:         {"KVM_CAP_ARM_PTRAUTH_ADDRESS", "CapARMPtrauthAddress"},
		C.KVM_CAP_ARM_PTRAUTH_GENERIC:         {"KVM_CAP_ARM_PTRAUTH_GENERIC", "CapARMPtrauthGeneric"},
		C.KVM_CAP_PMU_EVENT_FILTER:            {"KVM_CAP_PMU_EVENT_FILTER", "CapPMUEventFilter"},
		C.KVM_CAP_ARM_IRQ_LINE_LAYOUT_2:       {"KVM_CAP_ARM_IRQ_LINE_LAYOUT_2", "CapARMIRQLineLayout2"},
		C.KVM_CAP_HYPERV_DIRECT_TLBFLUSH:      {"KVM_CAP_HYPERV_DIRECT_TLBFLUSH", "CapHyperVDirectTLBFlush"},
		C.KVM_CAP_PPC_GUEST_DEBUG_SSTEP:       {"KVM_CAP_PPC_GUEST_DEBUG_SSTEP", "CapPPCGuestDebugSStep"},
		C.KVM_CAP_ARM_NISV_TO_USER:            {"KVM_CAP_ARM_NISV_TO_USER", "CapARMNISVToUser"},
		C.KVM_CAP_ARM_INJECT_EXT_DABT:         {"KVM_CAP_ARM_INJECT_EXT_DABT", "CapARMInjectExtDABT"},
		C.KVM_CAP_S390_VCPU_RESETS:            {"KVM_CAP_S390_VCPU_RESETS", "CapS390VCPUResets"},
		C.KVM_CAP_S390_PROTECTED:              {"KVM_CAP_S390_PROTECTED", "CapS390Protected"},
		C.KVM_CAP_PPC_SECURE_GUEST:            {"KVM_CAP_PPC_SECURE_GUEST", "CapPPCSecureGuest"},
		C.KVM_CAP_HALT_POLL:                   {"KVM_CAP_HALT_POLL", "CapHaltPoll"},
		C.KVM_CAP_ASYNC_PF_INT:                {"KVM_CAP_ASYNC_PF_INT", "CapAsyncPFInt"},
		C.KVM_CAP_LAST_CPU:                    {"KVM_CAP_LAST_CPU", "CapLastCPU"},
		C.KVM_CAP_SMALLER_MAXPHYADDR:          {"KVM_CAP_SMALLER_MAXPHYADDR", "CapSmallerMaxPhyAddr"},
		C.KVM_CAP_S390_DIAG318:                {"KVM_CAP_S390_DIAG318", "CapS390Diag318"},
		C.KVM_CAP_STEAL_TIME:                  {"KVM_CAP_STEAL_TIME", "CapStealTime"},
		C.KVM_CAP_X86_USER_SPACE_MSR:          {"KVM_CAP_X86_USER_SPACE_MSR", "CapX86UserSpaceMSR"},
		C.KVM_CAP_X86_MSR_FILTER:              {"KVM_CAP_X86_MSR_FILTER", "CapX86MSRFilter"},
		C.KVM_CAP_ENFORCE_PV_FEATURE_CPUID:    {"KVM_CAP_ENFORCE_PV_FEATURE_CPUID", "CapEnforcePVFeatureCPUID"},
		C.KVM_CAP_SYS_HYPERV_CPUID:            {"KVM_CAP_SYS_HYPERV_CPUID", "CapSysHyperVCPUID"},
		C.KVM_CAP_DIRTY_LOG_RING:              {"KVM_CAP_DIRTY_LOG_RING", "CapDirtyLogRing"},
		C.KVM_CAP_X86_BUS_LOCK_EXIT:           {"KVM_CAP_X86_BUS_LOCK_EXIT", "CapX86BusLockExit"},
		C.KVM_CAP_PPC_DAWR1:                   {"KVM_CAP_PPC_DAWR1", "CapPPCDAWR1"},
		C.KVM_CAP_SET_GUEST_DEBUG2:            {"KVM_CAP_SET_GUEST_DEBUG2", "CapSetGuestDebug2"},
		C.KVM_CAP_SGX_ATTRIBUTE:               {"KVM_CAP_SGX_ATTRIBUTE", "CapSGXAttribute"},
		C.KVM_CAP_VM_COPY_ENC_CONTEXT_FROM:    {"KVM_CAP_VM_COPY_ENC_CONTEXT_FROM", "CapVMCopyEncContextFrom"},
		C.KVM_CAP_PTP_KVM:                     {"KVM_CAP_PTP_KVM", "CapPTPKVM"},
		C.KVM_CAP_HYPERV_ENFORCE_CPUID:        {"KVM_CAP_HYPERV_ENFORCE_CPUID", "CapHyperVEnforceCPUID"},
		C.KVM_CAP_SREGS2:                      {"KVM_CAP_SREGS2", "CapSRegs2"},
		C.KVM_CAP_EXIT_HYPERCALL:              {"KVM_CAP_EXIT_HYPERCALL", "CapExitHypercall"},
		C.KVM_CAP_PPC_RPT_INVALIDATE:          {"KVM_CAP_PPC_RPT_INVALIDATE", "CapPPCRPTInvalidate"},
		C.KVM_CAP_BINARY_STATS_FD:             {"KVM_CAP_BINARY_STATS_FD", "CapBinaryStatsFD"},
		C.KVM_CAP_EXIT_ON_EMULATION_FAILURE:   {"KVM_CAP_EXIT_ON_EMULATION_FAILURE", "CapExitOnEmulationFailure"},
		C.KVM_CAP_ARM_MTE:                     {"KVM_CAP_ARM_MTE", "CapARMMTE"},
		C.KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM:    {"KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM", "CapVMMoveEncContextFrom"},
		C.KVM_CAP_VM_GPA_BITS:                 {"KVM_CAP_VM_GPA_BITS", "CapVMGPABits"},
		C.KVM_CAP_XSAVE2:                      {"KVM_CAP_XSAVE2", "CapXSave2"},
		C.KVM_CAP_SYS_ATTRIBUTES:              {"KVM_CAP_SYS_ATTRIBUTES", "CapSysAttributes"},
		C.KVM_CAP_PPC_AIL_MODE_3:              {"KVM_CAP_PPC_AIL_MODE_3", "CapPPCAILMode3"},
		C.KVM_CAP_S390_MEM_OP_EXTENSION:       {"KVM_CAP_S390_MEM_OP_EXTENSION", "CapS390MemOpExtension"},
		C.KVM_CAP_PMU_CAPABILITY:              {"KVM_CAP_PMU_CAPABILITY", "CapPMUCapability"},
		C.KVM_CAP_DISABLE_QUIRKS2:             {"KVM_CAP_DISABLE_QUIRKS2", "CapDisableQuirks2"},
		C.KVM_CAP_VM_TSC_CONTROL:              {"KVM_CAP_VM_TSC_CONTROL", "CapVMTSCControl"},
		C.KVM_CAP_SYSTEM_EVENT_DATA:           {"KVM_CAP_SYSTEM_EVENT_DATA", "CapSystemEventData"},
		C.KVM_CAP_ARM_SYSTEM_SUSPEND:          {"KVM_CAP_ARM_SYSTEM_SUSPEND", "CapARMSuspend"},
		C.KVM_CAP_S390_PROTECTED_DUMP:         {"KVM_CAP_S390_PROTECTED_DUMP", "CapS390ProtectedDump"},
		C.KVM_CAP_X86_TRIPLE_FAULT_EVENT:      {"KVM_CAP_X86_TRIPLE_FAULT_EVENT", "CapX86TripleFaultEvent"},
		C.KVM_CAP_X86_NOTIFY_VMEXIT:           {"KVM_CAP_X86_NOTIFY_VMEXIT", "CapX86NotifyVMExit"},
		C.KVM_CAP_VM_DISABLE_NX_HUGE_PAGES:    {"KVM_CAP_VM_DISABLE_NX_HUGE_PAGES", "CapVMDisableNXHugePages"},
		C.KVM_CAP_S390_ZPCI_OP:                {"KVM_CAP_S390_ZPCI_OP", "CapS390ZPCIOp"},
		C.KVM_CAP_S390_CPU_TOPOLOGY:           {"KVM_CAP_S390_CPU_TOPOLOGY", "CapS390CPUTopology"},
		C.KVM_CAP_DIRTY_LOG_RING_ACQ_REL:      {"KVM_CAP_DIRTY_LOG_RING_ACQ_REL", "CapDirtyLogRingAcqRel"},
	}

	capKeys := make([]int, 0, len(caps))
	for key := range caps {
		capKeys = append(capKeys, key)
	}
	slices.Sort(capKeys)

	fmt.Fprintln(b, "const (")
	for _, key := range capKeys {
		fmt.Fprintf(b, "%s = Cap(%d)\n", caps[key].Go, key)
	}
	fmt.Fprint(b, ")\n\n")

	fmt.Fprintln(b, "var allCaps = []Cap{")
	for _, key := range capKeys {
		fmt.Fprintf(b, "%s,\n", caps[key].Go)
	}
	fmt.Fprint(b, "}\n\n")

	fmt.Fprintln(b, "// String returns the name of the capability.")
	fmt.Fprintln(b, "func (c Cap) String() string {")
	fmt.Fprintln(b, "switch c {")
	for _, k := range capKeys {
		fmt.Fprintf(b, "case %s:return %q\n", caps[k].Go, caps[k].C)
	}
	fmt.Fprintf(b, "default:return fmt.Sprintf(\"Cap(%%d)\", c)\n")
	fmt.Fprintln(b, "}")
	fmt.Fprint(b, "}\n\n")

	exits := map[int]struct {
		C  string
		Go string
	}{
		C.KVM_EXIT_UNKNOWN:         {"KVM_EXIT_UNKNOWN", "ExitUnknown"},
		C.KVM_EXIT_EXCEPTION:       {"KVM_EXIT_EXCEPTION", "ExitException"},
		C.KVM_EXIT_IO:              {"KVM_EXIT_IO", "ExitIO"},
		C.KVM_EXIT_HYPERCALL:       {"KVM_EXIT_HYPERCALL", "ExitHypercall"},
		C.KVM_EXIT_DEBUG:           {"KVM_EXIT_DEBUG", "ExitDebug"},
		C.KVM_EXIT_HLT:             {"KVM_EXIT_HLT", "ExitHLT"},
		C.KVM_EXIT_MMIO:            {"KVM_EXIT_MMIO", "ExitMMIO"},
		C.KVM_EXIT_IRQ_WINDOW_OPEN: {"KVM_EXIT_IRQ_WINDOW_OPEN", "ExitIRQWindowOpen"},
		C.KVM_EXIT_SHUTDOWN:        {"KVM_EXIT_SHUTDOWN", "ExitShutdown"},
		C.KVM_EXIT_FAIL_ENTRY:      {"KVM_EXIT_FAIL_ENTRY", "ExitFailEntry"},
		C.KVM_EXIT_INTR:            {"KVM_EXIT_INTR", "ExitIntr"},
		C.KVM_EXIT_SET_TPR:         {"KVM_EXIT_SET_TPR", "ExitSetTPR"},
		C.KVM_EXIT_TPR_ACCESS:      {"KVM_EXIT_TPR_ACCESS", "ExitTPRAccess"},
		C.KVM_EXIT_S390_SIEIC:      {"KVM_EXIT_S390_SIEIC", "ExitS390SIEIC"},
		C.KVM_EXIT_S390_RESET:      {"KVM_EXIT_S390_RESET", "ExitS390Reset"},
		C.KVM_EXIT_DCR:             {"KVM_EXIT_DCR", "ExitDCR"}, /* deprecated */
		C.KVM_EXIT_NMI:             {"KVM_EXIT_NMI", "ExitNMI"},
		C.KVM_EXIT_INTERNAL_ERROR:  {"KVM_EXIT_INTERNAL_ERROR", "ExitInternalError"},
		C.KVM_EXIT_OSI:             {"KVM_EXIT_OSI", "ExitOSI"},
		C.KVM_EXIT_PAPR_HCALL:      {"KVM_EXIT_PAPR_HCALL", "ExitPAPRHCALL"},
		C.KVM_EXIT_S390_UCONTROL:   {"KVM_EXIT_S390_UCONTROL", "ExitS390UControl"},
		C.KVM_EXIT_WATCHDOG:        {"KVM_EXIT_WATCHDOG", "ExitWatchdog"},
		C.KVM_EXIT_S390_TSCH:       {"KVM_EXIT_S390_TSCH", "ExitS390TSCH"},
		C.KVM_EXIT_EPR:             {"KVM_EXIT_EPR", "ExitEPR"},
		C.KVM_EXIT_SYSTEM_EVENT:    {"KVM_EXIT_SYSTEM_EVENT", "ExitSystemEvent"},
		C.KVM_EXIT_S390_STSI:       {"KVM_EXIT_S390_STSI", "ExitS390STSI"},
		C.KVM_EXIT_IOAPIC_EOI:      {"KVM_EXIT_IOAPIC_EOI", "ExitIOAPICEOI"},
		C.KVM_EXIT_HYPERV:          {"KVM_EXIT_HYPERV", "ExitHyperV"},
		C.KVM_EXIT_ARM_NISV:        {"KVM_EXIT_ARM_NISV", "ExitARMNISV"},
		C.KVM_EXIT_X86_RDMSR:       {"KVM_EXIT_X86_RDMSR", "ExitX86RDMSR"},
		C.KVM_EXIT_X86_WRMSR:       {"KVM_EXIT_X86_WRMSR", "ExitX86WRMSR"},
		C.KVM_EXIT_DIRTY_RING_FULL: {"KVM_EXIT_DIRTY_RING_FULL", "ExitDirtyRingFull"},
		C.KVM_EXIT_AP_RESET_HOLD:   {"KVM_EXIT_AP_RESET_HOLD", "ExitAPResetHold"},
		C.KVM_EXIT_X86_BUS_LOCK:    {"KVM_EXIT_X86_BUS_LOCK", "ExitX86BusLock"},
		C.KVM_EXIT_XEN:             {"KVM_EXIT_XEN", "ExitXen"},
		C.KVM_EXIT_RISCV_SBI:       {"KVM_EXIT_RISCV_SBI", "ExitRISCVSBI"},
		C.KVM_EXIT_RISCV_CSR:       {"KVM_EXIT_RISCV_CSR", "ExitRISCVCSR"},
		C.KVM_EXIT_NOTIFY:          {"KVM_EXIT_NOTIFY", "ExitNotify"},
	}

	exitKeys := make([]int, 0, len(exits))
	for key := range exits {
		exitKeys = append(exitKeys, key)
	}
	slices.Sort(exitKeys)

	fmt.Fprintln(b, "const (")
	for _, key := range exitKeys {
		fmt.Fprintf(b, "%s = Exit(%d)\n", exits[key].Go, key)
	}
	fmt.Fprint(b, ")\n\n")

	fmt.Fprintln(b, "// String returns the name of the exit reason.")
	fmt.Fprintln(b, "func (e Exit) String() string {")
	fmt.Fprintln(b, "switch e {")
	for _, k := range exitKeys {
		fmt.Fprintf(b, "case %s:return %q\n", exits[k].Go, exits[k].C)
	}
	fmt.Fprintf(b, "default:return fmt.Sprintf(\"Exit(%%d)\", e)\n")
	fmt.Fprintln(b, "}")
	fmt.Fprint(b, "}\n\n")

	// memory region flags

	fmt.Fprintln(b, "const (")
	fmt.Fprintf(b, "MemLogDirtyPages = %d\n", C.KVM_MEM_LOG_DIRTY_PAGES)
	fmt.Fprintf(b, "MemReadonly = %d\n", C.KVM_MEM_READONLY)
	fmt.Fprint(b, ")\n\n")

	// cpuid flags

	fmt.Fprintln(b, "const (")
	fmt.Fprintf(b, "CPUIDFlagSignificantIndex = %d\n", C.KVM_CPUID_FLAG_SIGNIFCANT_INDEX)
	fmt.Fprintf(b, "CPUIDFlagStatefulFunc = %d\n", C.KVM_CPUID_FLAG_STATEFUL_FUNC)
	fmt.Fprintf(b, "CPUIDFlagStateReadNext = %d\n", C.KVM_CPUID_FLAG_STATE_READ_NEXT)
	fmt.Fprint(b, ")\n\n")

	// pitconfig flags

	fmt.Fprintln(b, "const (")
	fmt.Fprintf(b, "PITSpeakerDummy = %d\n", C.KVM_PIT_SPEAKER_DUMMY)
	fmt.Fprint(b, ")\n\n")

	// ioctls

	fmt.Fprintln(b, "const (")
	fmt.Fprintf(b, "kGetAPIVersion = %#x\n", C.KVM_GET_API_VERSION)
	fmt.Fprintf(b, "kCreateVM = %#x\n", C.KVM_CREATE_VM)
	fmt.Fprintf(b, "kGetMSRIndexList = %#x\n", C.KVM_GET_MSR_INDEX_LIST)
	fmt.Fprintf(b, "kGetMSRFeatureIndexList = %#x\n", C.KVM_GET_MSR_FEATURE_INDEX_LIST)
	fmt.Fprintf(b, "kCheckExtension = %#x\n", C.KVM_CHECK_EXTENSION)
	fmt.Fprintf(b, "kGetVCPUMmapSize = %#x\n", C.KVM_GET_VCPU_MMAP_SIZE)
	fmt.Fprintf(b, "kCreateVCPU = %#x\n", C.KVM_CREATE_VCPU)
	fmt.Fprintf(b, "kRun = %#x\n", C.KVM_RUN)
	fmt.Fprintf(b, "kGetRegs = %#x\n", C.KVM_GET_REGS)
	fmt.Fprintf(b, "kSetRegs = %#x\n", C.KVM_SET_REGS)
	fmt.Fprintf(b, "kGetSregs = %#x\n", C.KVM_GET_SREGS)
	fmt.Fprintf(b, "kSetSregs = %#x\n", C.KVM_SET_SREGS)
	fmt.Fprintf(b, "kGetMSRs = %#x\n", C.KVM_GET_MSRS)
	fmt.Fprintf(b, "kSetMSRs = %#x\n", C.KVM_SET_MSRS)
	fmt.Fprintf(b, "kGetFPU = %#x\n", C.KVM_GET_FPU)
	fmt.Fprintf(b, "kSetFPU = %#x\n", C.KVM_SET_FPU)
	fmt.Fprintf(b, "kCreateIRQChip = %#x\n", C.KVM_CREATE_IRQCHIP)
	fmt.Fprintf(b, "kCreatePIT2 = %#x\n", C.KVM_CREATE_PIT2)
	fmt.Fprintf(b, "kGetClock = %#x\n", C.KVM_GET_CLOCK)
	fmt.Fprintf(b, "kSetClock = %#x\n", C.KVM_SET_CLOCK)
	fmt.Fprintf(b, "kSetUserMemoryRegion = %#x\n", C.KVM_SET_USER_MEMORY_REGION)
	fmt.Fprintf(b, "kSetTSSAddr = %#x\n", C.KVM_SET_TSS_ADDR)
	fmt.Fprintf(b, "kSetIdentityMapAddr = %#x\n", C.KVM_SET_IDENTITY_MAP_ADDR)
	fmt.Fprintf(b, "kGetSupportedCPUID = %#x\n", C.KVM_GET_SUPPORTED_CPUID)
	fmt.Fprintf(b, "kSetCPUID2 = %#x\n", C.KVM_SET_CPUID2)
	fmt.Fprintf(b, "kIRQFD = %#x\n", C.KVM_IRQFD)
	fmt.Fprint(b, ")\n\n")

	// misc constants

	fmt.Fprintln(b, "const (")
	fmt.Fprintf(b, "nrInterrupts = %d\n", C.KVM_NR_INTERRUPTS)
	fmt.Fprint(b, ")\n\n")

	src := b.Bytes()
	fsrc, ferr := format.Source(src)
	if ferr == nil {
		src = fsrc
	}

	f, err := os.Create(*out)
	if err != nil {
		panic(err)
	}

	defer f.Close()

	if _, err := f.Write(src); err != nil {
		panic(err)
	}

	if ferr != nil {
		fmt.Fprintf(os.Stderr, "%s: %s\n", filepath.Base(os.Args[0]), ferr.Error())
		os.Exit(1)
	}
}
